// <auto-generated/>
namespace KnightCrawler.Wpf
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Threading.Tasks;
    using System.Windows;
    using System.Windows.Media;
    using System.Windows.Media.Animation;
    using System.Windows.Media.Imaging;

    class GameRenderer : FrameworkElement
    {
        const int CELL_DIMENTION = 100;
        const int SEED = 11111;
        const int MAP_WIDTH = 15;
        const int MAP_HEIGTH = 10;

        ImageBrush[] floorBrushes = new ImageBrush[8];
        ImageBrush wallBrush;
        ImageBrush wallTopRightBrush;
        ImageBrush wallTopLeftBrush;
        ImageBrush wallTopColumnBrush;
        ImageBrush wallTopMidBrush;
        ImageBrush knightBrush;

        BitmapImage knightImage;

        public void Initialize()
        {
            knightImage = new BitmapImage(new Uri("Images/Assets/knight_f_idle_anim.gif", UriKind.RelativeOrAbsolute));

            for(int i = 0; i < floorBrushes.Length; i++)
            {
                this.floorBrushes[i] = new ImageBrush(
                new BitmapImage(
                    new Uri(
                        string.Format("floor_{0}.png", i + 1),
                        UriKind.RelativeOrAbsolute)));
            }
            
            wallBrush = new ImageBrush(
                new BitmapImage(
                    new Uri(
                        "wall_mid.png",
                        UriKind.RelativeOrAbsolute)));

            knightBrush = new ImageBrush(
    new BitmapImage(
        new Uri(
            "Images/Assets/knight_f_idle_anim.gif",
            UriKind.RelativeOrAbsolute)));

            wallTopRightBrush = new ImageBrush(
                new BitmapImage(
                    new Uri(
                        "wall_inner_corner_mid_rigth.png",
                        UriKind.RelativeOrAbsolute)));

            wallTopLeftBrush = new ImageBrush(
    new BitmapImage(
        new Uri(
            "wall_inner_corner_mid_left.png",
            UriKind.RelativeOrAbsolute)));

            wallTopColumnBrush = new ImageBrush(
                new BitmapImage(
                new Uri(
                "wall_hole_1.png",
                UriKind.RelativeOrAbsolute)));


            wallTopMidBrush = new ImageBrush(
    new BitmapImage(
    new Uri(
    "wall_top_mid.png",
    UriKind.RelativeOrAbsolute)));

        }

        protected override void OnRender(DrawingContext drawingContext)
        {
            double blockHeight = Math.Ceiling(this.ActualHeight / (MAP_HEIGTH + 2));
            Random r = new Random(SEED);
            //base.OnRender(drawingContext);
            for (int y = 0; y < MAP_HEIGTH; y++)
            {
                for(int x = 0; x < MAP_WIDTH; x++)
                {
                    // Felső sor (fal teteje)
                    if(y == 0)
                    {
                        drawingContext.DrawRectangle(
                          wallTopMidBrush, null, new Rect(x * blockHeight, y * blockHeight, blockHeight, blockHeight));
                    }
                    // 1. sor (fal)
                    if(y == 1)
                    {
                        if(x == 0)
                        {
                            drawingContext.DrawRectangle(
                          wallTopLeftBrush, null, new Rect(Math.Ceiling(x * blockHeight), y * blockHeight, blockHeight, blockHeight));
                        }
                        else if(x == MAP_WIDTH - 1)
                        {
                            drawingContext.DrawRectangle(
                           wallTopRightBrush, null, new Rect(x * blockHeight, y * blockHeight, blockHeight, blockHeight));
                        }
                        else
                        {
                           drawingContext.DrawRectangle(
                           (r.Next(18) > 2) ? wallBrush : wallTopColumnBrush, null, new Rect(x * blockHeight, y * blockHeight, blockHeight, blockHeight));
                        }
                    }
                    else if(y > 1)
                    {
                        int rand = r.Next(floorBrushes.Length + 25);
                        Brush floorBrush = (rand >= floorBrushes.Length) ? floorBrushes[0] : floorBrushes[rand];
                        drawingContext.DrawRectangle(
                            floorBrush, null, new Rect(x * blockHeight, y * blockHeight, blockHeight, blockHeight));

                        if(x == 0)
                        {

                        }
                    }

                    drawingContext.DrawImage(knightImage, new Rect(200, 200, blockHeight, blockHeight));

                }
            }


        }
    }
}
